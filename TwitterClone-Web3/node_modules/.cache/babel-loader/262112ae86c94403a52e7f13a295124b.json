{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebProgramming-20212-Group6\\\\TwitterClone-Web3\\\\src\\\\components\\\\TweetInFeed.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./TweetInFeed.css\";\nimport { defaultImgs } from \"../defaultimgs\";\nimport { Icon } from \"web3uikit\";\nimport Web3 from 'web3';\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { CONTRACT_ABI, CONTRACT_ADDRESS } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TweetInFeed = _ref => {\n  _s();\n\n  let {\n    profile,\n    ethAddress,\n    search,\n    searchText\n  } = _ref;\n  const initialState = [];\n  const [tweets, setTweets] = useState([]);\n  const [stars, setStars] = useState([]);\n  const [account, setAccount] = useState();\n  const web3 = new Web3(Web3.givenProvider || 'http://localhost:3000');\n  const contractList = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\n  useEffect(() => {\n    async function loadTweetFeed() {\n      const counter = await contractList.methods.getCounter().call();\n      const accounts = await web3.eth.requestAccounts();\n      setAccount(accounts[0]);\n\n      for (var i = 0; i < counter; i++) {\n        const tweet = await contractList.methods.getTweetwithInfo(i).call();\n        const stars = await contractList.methods.getStar(i).call();\n        let star = parseInt(stars);\n        setTweets(tweets => [...tweets, tweet]);\n        setStars(stars => [...stars, star]);\n      }\n    }\n\n    async function loadTweetProfile() {\n      const accounts = await web3.eth.requestAccounts();\n      setAccount(accounts[0]);\n      const tweetIdList = await contractList.methods.getUserTweet(ethAddress).call();\n      setTweets(initialState);\n      setStars(initialState);\n\n      for (var i = 0; i < tweetIdList[1]; i++) {\n        const tweet = await contractList.methods.getTweetwithInfo(tweetIdList[0][i]).call();\n        const stars = await contractList.methods.getStar(tweetIdList[0][i]).call();\n        let star = parseInt(stars);\n        setTweets(tweets => [...tweets, tweet]);\n        setStars(stars => [...stars, star]);\n      }\n    }\n\n    async function loadTweetSearch() {\n      const accounts = await web3.eth.requestAccounts();\n      setAccount(accounts[0]);\n      const tweetIdList = await contractList.methods.searchTweet(searchText).call();\n      setTweets(initialState);\n      setStars(initialState);\n\n      for (var i = 0; i < tweetIdList[1]; i++) {\n        const tweet = await contractList.methods.getTweetwithInfo(tweetIdList[0][i]).call();\n        const stars = await contractList.methods.getStar(tweetIdList[0][i]).call();\n        let star = parseInt(stars);\n        setTweets(tweets => [...tweets, tweet]);\n        setStars(stars => [...stars, star]);\n      }\n    }\n\n    if (profile === false) {\n      loadTweetFeed();\n    } else if (search === true) {\n      loadTweetSearch();\n    } else if (profile === true) {\n      loadTweetProfile();\n    }\n  }, [ethAddress]);\n\n  const onClickStar = async index => {\n    var whoStar = await contractList.methods.whoStar(index).call({\n      from: account\n    });\n\n    if (whoStar[0] === false) {\n      await contractList.methods.star(index).send({\n        from: account\n      });\n      let tmpStars = [...stars];\n      tmpStars[index] += 1;\n      setStars(tmpStars);\n    } else {\n      await contractList.methods.unStar(index).send({\n        from: account\n      });\n      let tmpStars = [...stars];\n      tmpStars[index] -= 1;\n      setStars(tmpStars);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: tweets.map((tweet, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"feedTweet\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/profile/${tweet[2]}`,\n            className: \"link\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: (tweet === null || tweet === void 0 ? void 0 : tweet[6]) === \"\" ? defaultImgs[0] : tweet === null || tweet === void 0 ? void 0 : tweet[6],\n              className: \"profilePic\",\n              alt: \"Avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"completeTweet\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"who\",\n              children: [(tweet === null || tweet === void 0 ? void 0 : tweet[5]) === \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"No name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 42\n              }, this) : tweet === null || tweet === void 0 ? void 0 : tweet[5], /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"accWhen\",\n                children: `${tweet[2].slice(0, 4)}...${tweet[2].slice(38)} Â·\n\n                            ${tweet[4]}\n                            `\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tweetContent\",\n              children: [tweet[0], tweet[1] !== \"No Img\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: tweet[1],\n                className: \"tweetImg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 27\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"interactions\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"interactionNums\",\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  fill: \"#3f3f3f\",\n                  size: 20,\n                  svg: \"messageCircle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"interactionNums\",\n                onClick: e => {\n                  onClickStar(index);\n                },\n                children: [/*#__PURE__*/_jsxDEV(Icon, {\n                  fill: \"red\",\n                  size: 20,\n                  svg: \"star\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 23\n                }, this), stars[index]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"interactionNums\",\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  fill: \"#3f3f3f\",\n                  size: 20,\n                  svg: \"matic\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this)\n      }, void 0, false);\n    }).reverse()\n  }, void 0, false);\n};\n\n_s(TweetInFeed, \"XJ4Be6v+yo3E7KEr7/atj48vcVs=\");\n\n_c = TweetInFeed;\nexport default TweetInFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetInFeed\");","map":{"version":3,"sources":["D:/WebProgramming-20212-Group6/TwitterClone-Web3/src/components/TweetInFeed.js"],"names":["React","defaultImgs","Icon","Web3","useEffect","useState","Link","CONTRACT_ABI","CONTRACT_ADDRESS","TweetInFeed","profile","ethAddress","search","searchText","initialState","tweets","setTweets","stars","setStars","account","setAccount","web3","givenProvider","contractList","eth","Contract","loadTweetFeed","counter","methods","getCounter","call","accounts","requestAccounts","i","tweet","getTweetwithInfo","getStar","star","parseInt","loadTweetProfile","tweetIdList","getUserTweet","loadTweetSearch","searchTweet","onClickStar","index","whoStar","from","send","tmpStars","unStar","map","slice","e","reverse"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./TweetInFeed.css\";\r\nimport { defaultImgs } from \"../defaultimgs\";\r\nimport { Icon } from \"web3uikit\";\r\nimport Web3 from 'web3';\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CONTRACT_ABI, CONTRACT_ADDRESS } from '../config';\r\n\r\nconst TweetInFeed = ({profile, ethAddress, search, searchText}) => {\r\n\r\n  const initialState = []\r\n\r\n  const [tweets, setTweets] = useState([]);\r\n  const [stars, setStars] = useState([]);\r\n  const [account, setAccount] = useState();\r\n  const web3 = new Web3(Web3.givenProvider || 'http://localhost:3000');\r\n  const contractList = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    async function loadTweetFeed() {\r\n      const counter = await contractList.methods.getCounter().call();\r\n      const accounts = await web3.eth.requestAccounts();\r\n      setAccount(accounts[0])\r\n\r\n      for(var i=0;i<counter;i++) {\r\n        const tweet = await contractList.methods.getTweetwithInfo(i).call();\r\n        const stars = await contractList.methods.getStar(i).call();\r\n        let star = parseInt(stars)\r\n        setTweets((tweets) => [...tweets, tweet]);\r\n        setStars((stars) => [...stars,star]);\r\n      }\r\n    }\r\n\r\n    async function loadTweetProfile() {\r\n      const accounts = await web3.eth.requestAccounts();\r\n      setAccount(accounts[0])\r\n      const tweetIdList = await contractList.methods.getUserTweet(ethAddress).call();\r\n      setTweets(initialState)\r\n      setStars(initialState)\r\n\r\n      for(var i=0;i<tweetIdList[1];i++) {\r\n        const tweet = await contractList.methods.getTweetwithInfo(tweetIdList[0][i]).call();\r\n        const stars = await contractList.methods.getStar(tweetIdList[0][i]).call();\r\n        let star = parseInt(stars)\r\n        setTweets((tweets) => [...tweets, tweet]);\r\n        setStars((stars) => [...stars,star]);\r\n\r\n      }\r\n    }\r\n\r\n    async function loadTweetSearch() {\r\n\r\n      const accounts = await web3.eth.requestAccounts();\r\n      setAccount(accounts[0])\r\n      const tweetIdList = await contractList.methods.searchTweet(searchText).call();\r\n      setTweets(initialState)\r\n      setStars(initialState)\r\n\r\n      for(var i=0;i<tweetIdList[1];i++) {\r\n        const tweet = await contractList.methods.getTweetwithInfo(tweetIdList[0][i]).call();\r\n        const stars = await contractList.methods.getStar(tweetIdList[0][i]).call();\r\n        let star = parseInt(stars)\r\n        setTweets((tweets) => [...tweets, tweet]);\r\n        setStars((stars) => [...stars,star]);\r\n\r\n      }\r\n\r\n    }\r\n\r\n    if(profile === false) {\r\n      loadTweetFeed();\r\n      \r\n    } else if (search === true) {\r\n      loadTweetSearch()\r\n    }\r\n    else if(profile === true) {\r\n      loadTweetProfile();\r\n    }\r\n    \r\n  }, [ethAddress])\r\n\r\n\r\n  const onClickStar = ( async (index) => {\r\n\r\n    var whoStar = await contractList.methods.whoStar(index).call({from: account});\r\n\r\n    if (whoStar[0] === false) {\r\n      await contractList.methods.star(index).send({from: account});\r\n\r\n      let tmpStars = [...stars];\r\n      tmpStars[index] += 1;\r\n      setStars(tmpStars);\r\n    } else {\r\n      await contractList.methods.unStar(index).send({from: account});\r\n\r\n      let tmpStars = [...stars];\r\n      tmpStars[index] -= 1;\r\n      setStars(tmpStars);\r\n    }\r\n\r\n  })\r\n\r\n  return (\r\n    \r\n    <>\r\n      {tweets.map((tweet, index) => {\r\n          return (\r\n            <>\r\n              <div className=\"feedTweet\">\r\n                <Link to={`/profile/${tweet[2]}`} className=\"link\"> \r\n                  <img src={tweet?.[6] === \"\" ? defaultImgs[0] : tweet?.[6]} className=\"profilePic\" alt=\"Avatar\"></img>\r\n                </Link>\r\n                <div className=\"completeTweet\">\r\n                  <div className=\"who\">\r\n                    {tweet?.[5] === \"\" ? <div>No name</div> : tweet?.[5]}\r\n                      <div className=\"accWhen\">{\r\n                            `${tweet[2].slice(0, 4)}...${tweet[2].slice(38)} Â·\r\n\r\n                            ${tweet[4]}\r\n                            `  \r\n                          }\r\n                      </div>\r\n                  </div>\r\n                  <div className=\"tweetContent\">\r\n                  {tweet[0]}\r\n                  {tweet[1] !== \"No Img\" ? (\r\n                          <img\r\n                            src={tweet[1]}\r\n                            className=\"tweetImg\"\r\n                          ></img>\r\n                        ) : null}\r\n                  </div>\r\n                  <div className=\"interactions\">\r\n                    <div className=\"interactionNums\">\r\n                      <Icon fill=\"#3f3f3f\" size={20} svg=\"messageCircle\" />\r\n                    </div>\r\n                    <div className=\"interactionNums\" onClick={(e) => {onClickStar(index)}}>\r\n                      <Icon fill=\"red\" size={20} svg=\"star\" />\r\n                      {stars[index]}\r\n                    </div>\r\n                    <div className=\"interactionNums\">\r\n                      <Icon fill=\"#3f3f3f\" size={20} svg=\"matic\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          );\r\n\r\n        }\r\n      ).reverse()}    \r\n    </>\r\n  );\r\n};\r\n\r\nexport default TweetInFeed;\r\n"]},"metadata":{},"sourceType":"module"}