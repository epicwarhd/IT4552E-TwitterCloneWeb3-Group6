{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebProgramming-20212-Group6\\\\TwitterClone-Web3\\\\src\\\\components\\\\TweetInProfile.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./TweetInFeed.css\";\nimport golf from \"../images/golf.png\";\nimport canoe from \"../images/canoe.png\";\nimport { defaultImgs } from \"../defaultimgs\";\nimport { Icon } from \"web3uikit\";\nimport Web3 from 'web3';\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { CONTRACT_ABI, CONTRACT_ADDRESS } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TweetInProfile = _ref => {\n  _s();\n\n  let {\n    profile,\n    ethAddress\n  } = _ref;\n  const initialState = [];\n  const [tweets, setTweets] = useState([]);\n  const [stars, setStars] = useState([]);\n  const [info, setInfo] = useState([]);\n  const [account, setAccount] = useState();\n  const web3 = new Web3(Web3.givenProvider || 'http://localhost:3000');\n  const contractList = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\n  useEffect(() => {\n    async function loadTweetProfile() {\n      const accounts = await web3.eth.requestAccounts();\n      setAccount(accounts[0]);\n      const tweetIdList = await contractList.methods.getUserTweet(ethAddress).call();\n      setTweets(initialState);\n\n      for (var i = 0; i < tweetIdList[1]; i++) {\n        const tweet = await contractList.methods.getTweetwithInfo(tweetIdList[0][i]).call();\n        const stars = await contractList.methods.getStar(tweetIdList[0][i]).call();\n        let star = parseInt(stars);\n        setTweets(tweets => [...tweets, tweet]);\n        setStars(stars => [...stars, star]);\n      }\n    }\n\n    loadTweetProfile();\n  }, [ethAddress]);\n\n  const onClickStar = async index => {\n    var whoStar = await contractList.methods.whoStar(index).call({\n      from: account\n    });\n    console.log(whoStar);\n    console.log(index);\n    console.log(account);\n\n    if (whoStar[0] === false) {\n      await contractList.methods.star(index).send({\n        from: account\n      });\n      let tmpStars = [...stars];\n      tmpStars[index] += 1;\n      setStars(tmpStars);\n    } else {\n      await contractList.methods.unStar(index).send({\n        from: account\n      });\n      let tmpStars = [...stars];\n      tmpStars[index] -= 1;\n      setStars(tmpStars);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: tweets.map((tweet, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"feedTweet\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/profile/${tweet[2]}`,\n            className: \"link\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: (tweet === null || tweet === void 0 ? void 0 : tweet[6]) === \"\" ? defaultImgs[0] : tweet === null || tweet === void 0 ? void 0 : tweet[6],\n              className: \"profilePic\",\n              alt: \"Avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"completeTweet\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"who\",\n              children: [(tweet === null || tweet === void 0 ? void 0 : tweet[5]) === \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"No name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 42\n              }, this) : tweet === null || tweet === void 0 ? void 0 : tweet[5], /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"accWhen\",\n                children: `${tweet[2].slice(0, 4)}...${tweet[2].slice(38)} Â·\n\n                            ${tweet[4]}\n                            `\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tweetContent\",\n              children: [tweet[0], tweet[1] !== \"No Img\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: tweet[1],\n                className: \"tweetImg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 27\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"interactions\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"interactionNums\",\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  fill: \"#3f3f3f\",\n                  size: 20,\n                  svg: \"messageCircle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"interactionNums\",\n                onClick: e => {\n                  onClickStar(index);\n                },\n                children: [/*#__PURE__*/_jsxDEV(Icon, {\n                  fill: \"red\",\n                  size: 20,\n                  svg: \"star\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 23\n                }, this), stars[index]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"interactionNums\",\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  fill: \"#3f3f3f\",\n                  size: 20,\n                  svg: \"matic\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)\n      }, void 0, false);\n    }).reverse()\n  }, void 0, false);\n};\n\n_s(TweetInProfile, \"Lj3yaaSp+D1uCqnoE2Cma3N4RYE=\");\n\n_c = TweetInProfile;\nexport default TweetInProfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetInProfile\");","map":{"version":3,"sources":["D:/WebProgramming-20212-Group6/TwitterClone-Web3/src/components/TweetInProfile.js"],"names":["React","golf","canoe","defaultImgs","Icon","Web3","useEffect","useState","Link","CONTRACT_ABI","CONTRACT_ADDRESS","TweetInProfile","profile","ethAddress","initialState","tweets","setTweets","stars","setStars","info","setInfo","account","setAccount","web3","givenProvider","contractList","eth","Contract","loadTweetProfile","accounts","requestAccounts","tweetIdList","methods","getUserTweet","call","i","tweet","getTweetwithInfo","getStar","star","parseInt","onClickStar","index","whoStar","from","console","log","send","tmpStars","unStar","map","slice","e","reverse"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./TweetInFeed.css\";\r\nimport golf from \"../images/golf.png\";\r\nimport canoe from \"../images/canoe.png\";\r\nimport { defaultImgs } from \"../defaultimgs\";\r\nimport { Icon } from \"web3uikit\";\r\nimport Web3 from 'web3';\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CONTRACT_ABI, CONTRACT_ADDRESS } from '../config';\r\n\r\nconst TweetInProfile = ({profile, ethAddress}) => {\r\n\r\n    const initialState = []\r\n\r\n  const [tweets, setTweets] = useState([]);\r\n  const [stars, setStars] = useState([]);\r\n  const [info, setInfo] = useState([])\r\n  const [account, setAccount] = useState();\r\n  const web3 = new Web3(Web3.givenProvider || 'http://localhost:3000');\r\n  const contractList = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n\r\n    async function loadTweetProfile() {\r\n      const accounts = await web3.eth.requestAccounts();\r\n      setAccount(accounts[0])\r\n      const tweetIdList = await contractList.methods.getUserTweet(ethAddress).call();\r\n      setTweets(initialState)\r\n\r\n      for(var i=0;i<tweetIdList[1];i++) {\r\n        const tweet = await contractList.methods.getTweetwithInfo(tweetIdList[0][i]).call();\r\n        const stars = await contractList.methods.getStar(tweetIdList[0][i]).call();\r\n        let star = parseInt(stars)\r\n        setTweets((tweets) => [...tweets, tweet]);\r\n        setStars((stars) => [...stars,star]);\r\n\r\n      }\r\n    }\r\n\r\n      loadTweetProfile();\r\n    \r\n  }, [ethAddress])\r\n\r\n\r\n  const onClickStar = ( async (index) => {\r\n\r\n    var whoStar = await contractList.methods.whoStar(index).call({from: account});\r\n    console.log(whoStar)\r\n    console.log(index)\r\n    console.log(account)\r\n\r\n    if (whoStar[0] === false) {\r\n      await contractList.methods.star(index).send({from: account});\r\n\r\n      let tmpStars = [...stars];\r\n      tmpStars[index] += 1;\r\n      setStars(tmpStars);\r\n    } else {\r\n      await contractList.methods.unStar(index).send({from: account});\r\n\r\n      let tmpStars = [...stars];\r\n      tmpStars[index] -= 1;\r\n      setStars(tmpStars);\r\n    }\r\n\r\n  })\r\n\r\n  return (\r\n    \r\n    <>\r\n      {tweets.map((tweet, index) => {\r\n          return (\r\n            <>\r\n              <div className=\"feedTweet\">\r\n                <Link to={`/profile/${tweet[2]}`} className=\"link\"> \r\n                  <img src={tweet?.[6] === \"\" ? defaultImgs[0] : tweet?.[6]} className=\"profilePic\" alt=\"Avatar\"></img>\r\n                </Link>\r\n                <div className=\"completeTweet\">\r\n                  <div className=\"who\">\r\n                    {tweet?.[5] === \"\" ? <div>No name</div> : tweet?.[5]}\r\n                      <div className=\"accWhen\">{\r\n                            `${tweet[2].slice(0, 4)}...${tweet[2].slice(38)} Â·\r\n\r\n                            ${tweet[4]}\r\n                            `  \r\n                          }\r\n                      </div>\r\n                  </div>\r\n                  <div className=\"tweetContent\">\r\n                  {tweet[0]}\r\n                  {tweet[1] !== \"No Img\" ? (\r\n                          <img\r\n                            src={tweet[1]}\r\n                            className=\"tweetImg\"\r\n                          ></img>\r\n                        ) : null}\r\n                  </div>\r\n                  <div className=\"interactions\">\r\n                    <div className=\"interactionNums\">\r\n                      <Icon fill=\"#3f3f3f\" size={20} svg=\"messageCircle\" />\r\n                    </div>\r\n                    <div className=\"interactionNums\" onClick={(e) => {onClickStar(index)}}>\r\n                      <Icon fill=\"red\" size={20} svg=\"star\" />\r\n                      {stars[index]}\r\n                    </div>\r\n                    <div className=\"interactionNums\">\r\n                      <Icon fill=\"#3f3f3f\" size={20} svg=\"matic\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          );\r\n\r\n        }\r\n      ).reverse()}    \r\n    </>\r\n  );\r\n};\r\n\r\nexport default TweetInProfile;\r\n"]},"metadata":{},"sourceType":"module"}