{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebProgramming-20212-Group6\\\\TwitterClone-Web3\\\\src\\\\components\\\\TweetInFeed.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./TweetInFeed.css\";\nimport golf from \"../images/golf.png\";\nimport canoe from \"../images/canoe.png\";\nimport { defaultImgs } from \"../defaultimgs\";\nimport { Icon } from \"web3uikit\";\nimport { useMoralis, useWeb3ExecuteFunction, useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TweetInFeed = _ref => {\n  _s();\n\n  let {\n    profile\n  } = _ref;\n  const [tweetArr, setTweetArr] = useState();\n  const {\n    Moralis,\n    account\n  } = useMoralis();\n  const [tweets, setTweets] = useState([]);\n  const [index, setIndex] = useState(0); // const contrtProceor = useWeb3ExecuteFunction();\n\n  const {\n    data,\n    error,\n    fetch,\n    isFetching,\n    isLoading\n  } = useWeb3ExecuteFunction();\n  let options = {\n    contractAddress: \"0xb6Ec024fc3D6Be210ddE16A0911f1e408c5772F7\",\n    functionName: \"getListTweet\",\n    abi: [{\n      \"inputs\": [],\n      \"name\": \"getListTweet\",\n      \"outputs\": [{\n        \"internalType\": \"string[]\",\n        \"name\": \"\",\n        \"type\": \"string[]\"\n      }, {\n        \"internalType\": \"string[]\",\n        \"name\": \"\",\n        \"type\": \"string[]\"\n      }, {\n        \"internalType\": \"address[]\",\n        \"name\": \"\",\n        \"type\": \"address[]\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }]\n  };\n\n  async function getTweet() {\n    // nx0)\n    // wlex) {\n    await fetch({\n      params: options,\n      onSuccess: () => {\n        console.log(\"success\");\n      },\n      onError: () => {\n        console.log('error');\n      }\n    });\n    setTweets(data);\n  }\n\n  useEffect(() => {\n    getTweet();\n    console.log(tweets);\n  }, [tweets]); // useEffect(() => {\n  //   async function getTweets() {\n  //     try {\n  //       const Tweets = Moralis.Object.extend(\"Tweets\");\n  //       const query = new Moralis.Query(Tweets);\n  //       if (profile) {\n  //         query.equalTo(\"tweeterAcc\", account);\n  //       }\n  //       const results = await query.find();\n  //       setTweetArr(results);\n  //       // console.log(results);\n  //     } catch (error) {\n  //       console.error(error);\n  //     }\n  //   }\n  //   getTweets();\n  // }, [profile]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: tweets !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: tweets[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"null\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 55\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(TweetInFeed, \"tLvN2RmKKQzdljoC8i9MBqWHqPU=\", false, function () {\n  return [useMoralis, useWeb3ExecuteFunction];\n});\n\n_c = TweetInFeed;\nexport default TweetInFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetInFeed\");","map":{"version":3,"sources":["D:/WebProgramming-20212-Group6/TwitterClone-Web3/src/components/TweetInFeed.js"],"names":["React","golf","canoe","defaultImgs","Icon","useMoralis","useWeb3ExecuteFunction","useMoralisWeb3Api","useMoralisWeb3ApiCall","useEffect","useState","TweetInFeed","profile","tweetArr","setTweetArr","Moralis","account","tweets","setTweets","index","setIndex","data","error","fetch","isFetching","isLoading","options","contractAddress","functionName","abi","getTweet","params","onSuccess","console","log","onError"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,UAAT,EAAqBC,sBAArB,EAA6CC,iBAA7C,EAAgEC,qBAAhE,QAA6F,eAA7F;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;AAEA,MAAMC,WAAW,GAAG,QAAiB;AAAA;;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AACnC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,EAAxC;AACA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBX,UAAU,EAAvC;AAEA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC,CALmC,CAOnC;;AACA,QAAM;AAAEW,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,UAAtB;AAAkCC,IAAAA;AAAlC,MAAgDnB,sBAAsB,EAA5E;AAEA,MAAIoB,OAAO,GAAG;AACZC,IAAAA,eAAe,EAAE,4CADL;AAEZC,IAAAA,YAAY,EAAE,cAFF;AAGZC,IAAAA,GAAG,EAAE,CAAC;AACJ,gBAAU,EADN;AAEJ,cAAQ,cAFJ;AAGJ,iBAAW,CACT;AACE,wBAAgB,UADlB;AAEE,gBAAQ,EAFV;AAGE,gBAAQ;AAHV,OADS,EAMT;AACE,wBAAgB,UADlB;AAEE,gBAAQ,EAFV;AAGE,gBAAQ;AAHV,OANS,EAWT;AACE,wBAAgB,WADlB;AAEE,gBAAQ,EAFV;AAGE,gBAAQ;AAHV,OAXS,CAHP;AAoBJ,yBAAmB,MApBf;AAqBJ,cAAQ;AArBJ,KAAD;AAHO,GAAd;;AA6BE,iBAAeC,QAAf,GAA0B;AACxB;AACA;AAEA,UAAMP,KAAK,CAAC;AACVQ,MAAAA,MAAM,EAAEL,OADE;AAEVM,MAAAA,SAAS,EAAE,MAAM;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,OAJS;AAKVC,MAAAA,OAAO,EAAE,MAAM;AACbF,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AAPS,KAAD,CAAX;AAWEhB,IAAAA,SAAS,CAACG,IAAD,CAAT;AAGL;;AAGDZ,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,QAAQ;AACRG,IAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;AACD,GAHQ,EAGP,CAACA,MAAD,CAHO,CAAT,CA5DmC,CAkEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,2BACE;AAAA,gBAAKA,MAAM,KAAK,IAAX,gBAAkB;AAAA,kBAAMA,MAAM,CAAC,CAAD;AAAZ;AAAA;AAAA;AAAA;AAAA,cAAlB,gBAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhD;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA+CD,CApID;;GAAMN,W;UAEyBN,U,EAMyBC,sB;;;KARlDK,W;AAsIN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\r\nimport \"./TweetInFeed.css\";\r\nimport golf from \"../images/golf.png\";\r\nimport canoe from \"../images/canoe.png\";\r\nimport { defaultImgs } from \"../defaultimgs\";\r\nimport { Icon } from \"web3uikit\";\r\nimport { useMoralis, useWeb3ExecuteFunction, useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst TweetInFeed = ({ profile }) => {\r\n  const [tweetArr, setTweetArr] = useState();\r\n  const { Moralis, account } = useMoralis();\r\n\r\n  const [tweets, setTweets] = useState([]);\r\n  const [index, setIndex] = useState(0)\r\n\r\n  // const contrtProceor = useWeb3ExecuteFunction();\r\n  const { data, error, fetch, isFetching, isLoading } = useWeb3ExecuteFunction();\r\n\r\n  let options = {\r\n    contractAddress: \"0xb6Ec024fc3D6Be210ddE16A0911f1e408c5772F7\",\r\n    functionName: \"getListTweet\",\r\n    abi: [{\r\n      \"inputs\": [],\r\n      \"name\": \"getListTweet\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"string[]\",\r\n          \"name\": \"\",\r\n          \"type\": \"string[]\"\r\n        },\r\n        {\r\n          \"internalType\": \"string[]\",\r\n          \"name\": \"\",\r\n          \"type\": \"string[]\"\r\n        },\r\n        {\r\n          \"internalType\": \"address[]\",\r\n          \"name\": \"\",\r\n          \"type\": \"address[]\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    }]\r\n  }\r\n\r\n  \r\n    async function getTweet() {\r\n      // nx0)\r\n      // wlex) {\r\n      \r\n      await fetch({\r\n        params: options,\r\n        onSuccess: () => {\r\n          console.log(\"success\")\r\n        },\r\n        onError: () => {\r\n          console.log('error')\r\n        }\r\n      })\r\n      \r\n      \r\n        setTweets(data)\r\n      \r\n      \r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    getTweet()\r\n    console.log(tweets)\r\n  },[tweets])\r\n\r\n\r\n  // useEffect(() => {\r\n  //   async function getTweets() {\r\n  //     try {\r\n  //       const Tweets = Moralis.Object.extend(\"Tweets\");\r\n  //       const query = new Moralis.Query(Tweets);\r\n  //       if (profile) {\r\n  //         query.equalTo(\"tweeterAcc\", account);\r\n  //       }\r\n  //       const results = await query.find();\r\n\r\n  //       setTweetArr(results);\r\n  //       // console.log(results);\r\n  //     } catch (error) {\r\n  //       console.error(error);\r\n  //     }\r\n  //   }\r\n  //   getTweets();\r\n  // }, [profile]);\r\n\r\n  return (\r\n    <>\r\n      <h1>{tweets !== null ? <div>{tweets[0]}</div> : <div>null</div>}</h1>\r\n\r\n      \r\n        \r\n          {/* <>\r\n            <div className=\"feedTweet\">\r\n              <img src={defaultImgs[0]} className=\"profilePic\"></img>\r\n              <div className=\"completeTweet\">\r\n                <div className=\"who\">\r\n                \r\n                  <div className=\"accWhen\">{\r\n                        `${tweets[2][0].slice(0, 4)}...${tweets[2][0].slice(38)} Â· \r\n                       \r\n                        `  \r\n                      }\r\n                      </div>\r\n                </div>\r\n                <div className=\"tweetContent\">\r\n                {tweets[0][0]}\r\n                {tweets[1][0] && (\r\n                        <img\r\n                          src={tweets[1][0]}\r\n                          className=\"tweetImg\"\r\n                        ></img>\r\n                      )}\r\n                </div>\r\n                <div className=\"interactions\">\r\n                  <div className=\"interactionNums\">\r\n                    <Icon fill=\"#3f3f3f\" size={20} svg=\"messageCircle\" />\r\n                  </div>\r\n                  <div className=\"interactionNums\">\r\n                    <Icon fill=\"#3f3f3f\" size={20} svg=\"star\" />\r\n                    12\r\n                  </div>\r\n                  <div className=\"interactionNums\">\r\n                    <Icon fill=\"#3f3f3f\" size={20} svg=\"matic\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </> */}\r\n        \r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default TweetInFeed;\r\n"]},"metadata":{},"sourceType":"module"}